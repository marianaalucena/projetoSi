--> Mudanças no pacote controller

1. Usando o extract method removi do método criarProduto no controller essa parte de código

boolean produtoExiste = false;

		for (Product p : produtoService.findAllProdutos()) {
			if (p.getBarcode().equals(produto.getBarcode())) {
				produtoExiste = true;
			}
		}

Criei o método produtoExiste.

2. Usando o extract method removi dos métodos consultarProduto, updateProduto e deleteUser a seguinte parte de código. Acabando, dessa forma, com a duplicação de código. 

Product p = null;

		for (Product produto : produtoService.findAllProdutos()) {
			if (produto.getId() == id) {
				p = produto;
			}
		}

Criei o método procuraPeloId.

3. Removendo código comentado

3.1
// esse c�digo n�o precisa mais
		// try {
		// currentProduto.mudaSituacao(produto.pegaSituacao());
		// } catch (ObjetoInvalidoException e) {
		// return new ResponseEntity(new CustomErrorType("Unable to upate. Produto with
		// id " + id + " invalid."),
		// HttpStatus.NOT_FOUND);
		// }
3.2
			// You many decide to return HttpStatus.NOT_FOUND

3.3
	// este metodo nunca eh chamado, mas se precisar estah aqui

O comentário não tem necessidade, já que o método é utilizado

4. Atualizou o verificaCriacaoLote para que seja aplicado o padrão state, antes estava da seguinte forma:

private void verificaCriacaoLote(Produto product, LoteDTO loteDTO) {
		try {
			if (product.getSituacao() == Produto.INDISPONIVEL) {
 				if (loteDTO.getNumeroDeItens() > 0) {
 					Produto produtoDisponivel = product;
					produtoDisponivel.situacao = Produto.DISPONIVEL;
 					produtoService.updateProduto(produtoDisponivel);
 				}
 			}
		} catch (ObjetoInvalidoException e){
			e.printStackTrace();
		}

5. Atualizou o criarProduto para que seja aplicado o padrão state, antes estava da seguinte forma:

public ResponseEntity<?> criarProduto(@RequestBody Produto produto, UriComponentsBuilder ucBuilder) {
 
 	
 		if (produtoExiste(produto)) {
 			return new ResponseEntity(new CustomErrorType("O produto " + produto.getNome() + " do fabricante "
 					+ produto.getFabricante() + " ja esta cadastrado!"), HttpStatus.CONFLICT);
 		}
 
 		try {
			produto.mudaSituacao(Produto.INDISPONIVEL);
 		} catch (ObjetoInvalidoException e) {
 			return new ResponseEntity(new CustomErrorType("Error: Produto" + produto.getNome() + " do fabricante "
 					+ produto.getFabricante() + " alguma coisa errada aconteceu!"), HttpStatus.NOT_ACCEPTABLE);

}

6. Extract Method no criarLote
   Foi criado o método verificaCriacaoLote

7. Foi removido do método consultarProduto o seguinte código:

		currentProduto.mudaNome(produto.getNome());
		currentProduto.setPreco(produto.getPreco());
		currentProduto.setCodigoBarra(produto.getCodigoBarra());
		currentProduto.mudaFabricante(produto.getFabricante());
		currentProduto.mudaCategoria(produto.getCategoria());

--> Mudanças no pacote model

1. Usando o padrão de projeto state, criou-se as classes Unavailable, Available e a Interface State. 
   Removeu da classe Produto as variáveis estáticas DISPONÍVEL e INDISPONÍVEL e removeu também a Situação do Produto.

2. Modificou o método mudaSituação para que seja aplicado o padrão state, antes estava da seguinte forma:
public void mudaSituacao(int situacao) throws ObjetoInvalidoException {
		
	switch (situacao) {
		
		case 1:
			
			this.situacao = Produto.DISPONIVEL;

			break;
		
		case 2:
			
			this.situacao = Produto.INDISPONIVEL;

			break;


		default:

			throw new ObjetoInvalidoException("Situacao Invalida");

		}

	}

3. No método updateProduto foi acrescentado o seguinte código

		this.mudaNome(produto.getNome());
		this.setPreco(produto.getPreco());
		this.setCodigoBarra(produto.getCodigoBarra());
		this.mudaFabricante(produto.getFabricante());
		this.mudaCategoria(produto.getCategoria());

Antes quem fazia todas essas modificações era o Controller no método consultarProduto.
